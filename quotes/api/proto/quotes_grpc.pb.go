// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// QuotesClient is the client API for Quotes service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuotesClient interface {
	GetCandlesticks(ctx context.Context, in *GetCandlesticksRequest, opts ...grpc.CallOption) (*GetCandlesticksReply, error)
}

type quotesClient struct {
	cc grpc.ClientConnInterface
}

func NewQuotesClient(cc grpc.ClientConnInterface) QuotesClient {
	return &quotesClient{cc}
}

func (c *quotesClient) GetCandlesticks(ctx context.Context, in *GetCandlesticksRequest, opts ...grpc.CallOption) (*GetCandlesticksReply, error) {
	out := new(GetCandlesticksReply)
	err := c.cc.Invoke(ctx, "/proto.Quotes/GetCandlesticks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuotesServer is the server API for Quotes service.
// All implementations must embed UnimplementedQuotesServer
// for forward compatibility
type QuotesServer interface {
	GetCandlesticks(context.Context, *GetCandlesticksRequest) (*GetCandlesticksReply, error)
	mustEmbedUnimplementedQuotesServer()
}

// UnimplementedQuotesServer must be embedded to have forward compatible implementations.
type UnimplementedQuotesServer struct {
}

func (UnimplementedQuotesServer) GetCandlesticks(context.Context, *GetCandlesticksRequest) (*GetCandlesticksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCandlesticks not implemented")
}
func (UnimplementedQuotesServer) mustEmbedUnimplementedQuotesServer() {}

// UnsafeQuotesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuotesServer will
// result in compilation errors.
type UnsafeQuotesServer interface {
	mustEmbedUnimplementedQuotesServer()
}

func RegisterQuotesServer(s grpc.ServiceRegistrar, srv QuotesServer) {
	s.RegisterService(&_Quotes_serviceDesc, srv)
}

func _Quotes_GetCandlesticks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCandlesticksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuotesServer).GetCandlesticks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Quotes/GetCandlesticks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuotesServer).GetCandlesticks(ctx, req.(*GetCandlesticksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Quotes_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Quotes",
	HandlerType: (*QuotesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCandlesticks",
			Handler:    _Quotes_GetCandlesticks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "quotes.proto",
}
