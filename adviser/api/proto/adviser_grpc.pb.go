// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AdviserClient is the client API for Adviser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AdviserClient interface {
	GetAdvices(ctx context.Context, in *GetAdvicesRequest, opts ...grpc.CallOption) (*GetAdvicesReply, error)
}

type adviserClient struct {
	cc grpc.ClientConnInterface
}

func NewAdviserClient(cc grpc.ClientConnInterface) AdviserClient {
	return &adviserClient{cc}
}

func (c *adviserClient) GetAdvices(ctx context.Context, in *GetAdvicesRequest, opts ...grpc.CallOption) (*GetAdvicesReply, error) {
	out := new(GetAdvicesReply)
	err := c.cc.Invoke(ctx, "/proto.Adviser/GetAdvices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AdviserServer is the server API for Adviser service.
// All implementations must embed UnimplementedAdviserServer
// for forward compatibility
type AdviserServer interface {
	GetAdvices(context.Context, *GetAdvicesRequest) (*GetAdvicesReply, error)
	mustEmbedUnimplementedAdviserServer()
}

// UnimplementedAdviserServer must be embedded to have forward compatible implementations.
type UnimplementedAdviserServer struct {
}

func (UnimplementedAdviserServer) GetAdvices(context.Context, *GetAdvicesRequest) (*GetAdvicesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdvices not implemented")
}
func (UnimplementedAdviserServer) mustEmbedUnimplementedAdviserServer() {}

// UnsafeAdviserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AdviserServer will
// result in compilation errors.
type UnsafeAdviserServer interface {
	mustEmbedUnimplementedAdviserServer()
}

func RegisterAdviserServer(s grpc.ServiceRegistrar, srv AdviserServer) {
	s.RegisterService(&Adviser_ServiceDesc, srv)
}

func _Adviser_GetAdvices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAdvicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AdviserServer).GetAdvices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Adviser/GetAdvices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AdviserServer).GetAdvices(ctx, req.(*GetAdvicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Adviser_ServiceDesc is the grpc.ServiceDesc for Adviser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Adviser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Adviser",
	HandlerType: (*AdviserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAdvices",
			Handler:    _Adviser_GetAdvices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/adviser.proto",
}
